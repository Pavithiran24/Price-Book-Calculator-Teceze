import React from 'react';
import { FileText, Download, Receipt, Check } from 'lucide-react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import jsPDF from 'jspdf';
import { saveAs } from 'file-saver';

interface CalculationResult {
  baseRate: number;
  serviceManagementFee: number;
  travelCharges: number;
  outOfHoursMultiplier: number;
  weekendHolidayMultiplier: number;
  subtotal: number;
  total: number;
  breakdown: {
    label: string;
    amount: number;
    description: string;
  }[];
}

interface PriceSummaryProps {
  calculation: CalculationResult;
  onReset: () => void;
}

export const PriceSummary: React.FC<PriceSummaryProps> = ({ calculation, onReset }) => {
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
    }).format(amount);
  };

    // PriceSummary component displays the calculation breakdown and total cost for the selected service configuration.
  const generatePDF = () => {
    const doc = new jsPDF();
    const pageWidth = doc.internal.pageSize.width;
    let yPosition = 30;

    // Header
    doc.setFontSize(22);
    doc.setTextColor(40, 70, 200);
    doc.text('Price Book Calculator Summary', pageWidth / 2, yPosition, { align: 'center' });
    doc.setTextColor(0);
    yPosition += 16;
    doc.setFontSize(12);
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth / 2, yPosition, { align: 'center' });
    yPosition += 18;

    // Table Header
    doc.setFontSize(14);
    doc.setFillColor(230, 240, 255);
    doc.rect(20, yPosition, pageWidth - 40, 10, 'F');
    doc.setTextColor(40, 70, 200);
    doc.text('Item', 25, yPosition + 7);
    doc.text('Amount', pageWidth / 2, yPosition + 7, { align: 'center' });
    doc.text('Description', pageWidth - 25, yPosition + 7, { align: 'right' });
    doc.setTextColor(0);
    yPosition += 14;

    // Table Rows
    doc.setFontSize(12);
    calculation.breakdown.forEach((item) => {
      doc.text(item.label, 25, yPosition);
      doc.text(formatCurrency(item.amount), pageWidth / 2, yPosition, { align: 'center' });
      doc.text(item.description || '', pageWidth - 25, yPosition, { align: 'right' });
      yPosition += 10;
    });

    // Total
    yPosition += 6;
    doc.setDrawColor(40, 70, 200);
    doc.setLineWidth(0.5);
    doc.line(20, yPosition, pageWidth - 20, yPosition);
    yPosition += 12;
    doc.setFontSize(16);
    doc.setTextColor(0, 150, 0);
    doc.text('Total:', 25, yPosition);
    doc.text(formatCurrency(calculation.total), pageWidth - 25, yPosition, { align: 'right' });
    doc.setTextColor(0);

    // Footer
    yPosition += 20;
    doc.setFontSize(10);
    doc.setTextColor(100);
    doc.text('Generated by Price Book Calculator', pageWidth / 2, yPosition, { align: 'center' });
    doc.setTextColor(0);

    doc.save('price-calculation-summary.pdf');
  };

  const exportCSV = () => {
    const csvContent = [
      ['Item', 'Amount', 'Description'],
      ...calculation.breakdown.map(item => [
        item.label,
        item.amount.toFixed(2),
        item.description
      ]),
      ['', '', ''],
      ['Total', calculation.total.toFixed(2), '']
    ];

    const csvString = csvContent.map(row => 
      row.map(field => `"${field}"`).join(',')
    ).join('\n');

    const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
    saveAs(blob, 'price-calculation-summary.csv');
  };

  return (
    <Card className="shadow-large border-success/20 animate-scale-in">
      <CardHeader className="bg-gradient-to-r from-success-soft to-accent-soft">
        <CardTitle className="flex items-center gap-3 text-xl">
          <Receipt className="h-6 w-6 text-success" />
          Price Summary
          <Badge variant="outline" className="ml-auto bg-success text-success-foreground">
            <Check className="h-3 w-3 mr-1" />
            Complete
          </Badge>
        </CardTitle>
        <CardDescription>
          Your detailed cost breakdown and total pricing
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-6 pt-6">
        {/* Cost Breakdown */}
        <div className="space-y-4">
          <h3 className="text-lg font-semibold flex items-center gap-2">
            <FileText className="h-5 w-5 text-primary" />
            Cost Breakdown
          </h3>
          
          <div className="space-y-3">
            {calculation.breakdown.map((item, index) => (
              <div key={index} className="group">
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <p className="font-medium text-foreground">{item.label}</p>
                    {item.description && (
                      <p className="text-sm text-muted-foreground mt-1">{item.description}</p>
                    )}
                  </div>
                  <p className="font-semibold text-right ml-4 group-hover:text-primary transition-colors">
                    {formatCurrency(item.amount)}
                  </p>
                </div>
                {index < calculation.breakdown.length - 1 && (
                  <Separator className="mt-3" />
                )}
              </div>
            ))}
          </div>
        </div>

        <Separator className="my-6" />

        {/* Total */}
        <div className="bg-primary-soft rounded-lg p-6">
          <div className="flex justify-between items-center">
            <div>
              <h3 className="text-2xl font-bold text-primary">Total Cost</h3>
              <p className="text-sm text-muted-foreground mt-1">
                Including all fees and surcharges
              </p>
            </div>
            <div className="text-right">
              <p className="text-3xl font-bold text-primary">
                {formatCurrency(calculation.total)}
              </p>
            </div>
          </div>
        </div>

        {/* Export Actions */}
        <div className="flex flex-col sm:flex-row gap-3">
          <Button 
            onClick={generatePDF}
            className="flex-1 premium-gradient text-white hover:opacity-90 transition-all duration-300"
          >
            <Download className="h-4 w-4 mr-2" />
            Download PDF
          </Button>
          
          <Button 
            onClick={exportCSV}
            variant="outline"
            className="flex-1"
          >
            <FileText className="h-4 w-4 mr-2" />
            Export CSV
          </Button>
          
          <Button 
            onClick={onReset}
            variant="secondary"
            className="flex-1"
          >
            Calculate Again
          </Button>
        </div>

        {/* Additional Info */}
        <div className="bg-accent-soft rounded-lg p-4 mt-6">
          <div className="flex items-start gap-3">
            <div className="bg-accent rounded-full p-1 mt-0.5">
              <Check className="h-3 w-3 text-accent-foreground" />
            </div>
            <div>
              <p className="font-medium text-accent">Quote Valid</p>
              <p className="text-sm text-muted-foreground mt-1">
                This pricing quote is valid for 30 days from the date of generation. 
                Terms and conditions may apply based on your service agreement.
              </p>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};
